version: '2'

services:

  messagebus:
    extends:
      file: docker-compose.base.yml
      service: rabbitmq

  redis:
    extends:
      file: docker-compose.base.yml
      service: redis

  # Django back-end
  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: bash entrypoint.sh --prod
    env_file: backend.env
    environment:
      - DJANGO_SETTINGS_MODULE=personal_site.settings.prod
    ports:
      - "8000:8000"
    volumes:
      - ./backend/:/app/
      - ./static/:/app/personal_site/staticfiles
    working_dir: /app/
    links:
      - messagebus
      - redis
      - sentry_server

  celery-worker:
    extends:
      file: docker-compose.base.yml
      service: celery-worker
    links:
      - redis
      - messagebus

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # Build frontend one time
    # and reuse its static files
    command: ./entrypoint-prod.sh
    volumes:
      - ./frontend/:/frontend/


  # ====== Sentry services ======
  sentry_postgres:
    image: postgres:9.5-alpine
    volumes_from:
    - sentry_postgres_data
    env_file:
      - sentry.env

  sentry_postgres_data:
    image: alpine
    command: echo
    volumes:
      - ./pgdata_sentry:/var/lib/postgresql/data

  sentry_server:
    # TODO: Add entrypoint script with initial data migration
    image: sentry:8.12.0
    volumes:
      - ./sentry-files:/var/lib/sentry/files
    links:
      - sentry_postgres
      - redis
    ports:
      - "19000:9000"
    env_file:
      - sentry.env

  sentry_celery_beat:
    image: sentry:8.12.0
    links:
      - sentry_postgres
      - redis
    env_file:
      - sentry.env
    command: "sentry run cron"

  sentry_worker:
    image: sentry:8.12.0
    links:
      - sentry_postgres
      - redis
    env_file:
      - sentry.env
    command: "sentry run worker"