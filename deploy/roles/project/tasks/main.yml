- include: checkout.yml
- include: virtualenv.yml
- include: gunicorn.yml

- name: Install binary dependencies
  yum: name={{ item }} state=present
       update_cache=yes
  with_items:
    - libxml2-devel
    - libjpeg-devel
    - libxslt-devel
    - zlib-devel
    - openssl

- name: Install required dependencies
  command: "{{ project_venv }}/bin/pip install -r {{ project_root }}/requirements/base.txt"
  args:
    chdir: "{{ project_root }}/personal_site"
  become: yes
  become_user: "{{ project_user }}"
  environment:
    PERSONAL_SITE_SECRET_KEY: "{{ project_secret_key }}"
    DJANGO_SETTINGS_MODULE: "{{ project_settings_module }}"

- name: Run migrations
  command: "{{ project_venv }}/bin/python3.5 manage.py migrate --run-syncdb"
  args:
    chdir: "{{ project_root }}/personal_site"
  environment:
    PERSONAL_SITE_SECRET_KEY: "{{ project_secret_key }}"
    DJANGO_SETTINGS_MODULE: "{{ project_settings_module }}"
  become: yes
  become_user: "{{ project_user }}"

- name: Install front-end dependencies with bower
  command: "{{ project_venv }}/bin/python manage.py bower install"
  args:
    chdir: "{{ project_root }}/personal_site"
  become: yes
  become_user: "{{ project_user }}"
  environment:
    PERSONAL_SITE_SECRET_KEY: "{{ project_secret_key }}"
    DJANGO_SETTINGS_MODULE: "{{ project_settings_module }}"
    STATIC_DIR: "{{ project_static_dir }}"

- name: Collect static files
  command: "{{ project_venv }}/bin/python manage.py collectstatic --noinput"
  args:
    chdir: "{{ project_root }}/personal_site"
  become: yes
  become_user: "{{ project_user }}"
  environment:
    PERSONAL_SITE_SECRET_KEY: "{{ project_secret_key }}"
    DJANGO_SETTINGS_MODULE: "{{ project_settings_module }}"
  STATIC_DIR: "{{ project_static_dir }}"

- name: Copy supervisord config
  template: src=personalsite-supervisord.conf.j2
            dest=/etc/supervisord.d/personalsite.conf
  become: yes
  become_user: "{{ project_user }}"

- name: Restart supervisord
  service: name=supervisord
           state=restarted

- name: Stop process if it is running
  supervisorctl: name={{ project_supervisor_name }}
                 state=stopped
                 config=/etc/supervisord.conf
  ignore_errors: true

- name: Start process
  supervisorctl: name={{ project_supervisor_name }}
                 state=started
                 config=/etc/supervisord.conf

- name: Create directory for DH key
  file: dest={{ dh_key_path | dirname }}
        state=directory

- name: Create DH key if not exists
  command: openssl dhparam -out {{ dh_key_path }} 2048
           creates={{ dh_key_path }}
  when:
    project_configuration=='prod'

- name: Copy 404 and 500 error pages templates
  template: src={{ item }}.html.j2
            dest={{ project_static_dir }}/{{ item }}.html
  with_items:
    - 404
    - 50x
  become: yes
  become_user: "{{ project_user }}"

- name: Copy nginx configuration file
  template: src=mrlokans.com.dev.conf.j2
            dest=/etc/nginx/sites-available/mrlokans.com.conf
  when:
    project_configuration=='dev'

- name: Copy nginx configuration file
  template: src=mrlokans.com.prod.conf.j2
            dest=/etc/nginx/sites-available/mrlokans.com.conf
  when:
    project_configuration=='prod'

- name: Create symlink to config
  file: src=/etc/nginx/sites-available/mrlokans.com.conf
        dest=/etc/nginx/sites-enabled/mrlokans.com.conf
        state=link

- name: Enable HTTPD connection settings in SELinux
  command: setsebool httpd_can_network_connect 1

- name: Restart nginx
  service: name=nginx state=restarted
